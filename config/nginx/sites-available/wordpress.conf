# Redirect all non-SSL traffic to the SSL version
server {
        listen [::]:80;
        listen 80;

        server_name TEMPLATE www.TEMPLATE;

        # Redirect directly to the right HTTPS host and skip the
        # http://www -> https://www -> https:// chain.        
        return 301 https://TEMPLATE$request_uri;
}

# Redirect SSL traffic going to www to the non-www version
server {
        listen [::]:443 ssl http2;
        listen 443 ssl http2;

        server_name www.TEMPLATE;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        return 301 https://TEMPLATE$request_uri;
}

server {
        listen [::]:443 ssl http2;
        listen 443 ssl http2;

        server_name TEMPLATE;

        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;

        root FOLDER/web;

        index index.php;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
                include snippets/fastcgi-php.conf;

                fastcgi_pass unix:/run/php/php7.0-fpm-deploy.sock;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        
        # Expire rules for static content

        # No default expire rule. This config mirrors that of apache as outlined in the
        # html5-boilerplate .htaccess file. However, nginx applies rules by location,
        # the apache rules are defined by type. A consequence of this difference is that
        # if you use no file extension in the url and serve html, with apache you get an
        # expire time of 0s, with nginx you'd get an expire header of one month in the
        # future (if the default expire rule is 1 month). Therefore, do not use a
        # default expire rule with nginx unless your site is completely static

        # cache.appcache, your document html and data
        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
                add_header Cache-Control "max-age=0";
        }

        # Feed
        location ~* \.(?:rss|atom)$ {
                add_header Cache-Control "max-age=3600";
        }

        # Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
                access_log off;
                add_header Cache-Control "max-age=2592000";
        }

        # Media: svgz files are already compressed.
        location ~* \.svgz$ {
                access_log off;
                gzip off;
                add_header Cache-Control "max-age=2592000";
        }

        # CSS and Javascript
        location ~* \.(?:css|js)$ {
                add_header Cache-Control "max-age=31536000";
                access_log off;
        }

        # Cross domain webfont access
        location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
                add_header "Access-Control-Allow-Origin" "*";

                # Also, set cache rules for webfonts.
                #
                # See http://wiki.nginx.org/HttpCoreModule#location
                # And https://github.com/h5bp/server-configs/issues/85
                # And https://github.com/h5bp/server-configs/issues/86
                access_log off;
                add_header Cache-Control "max-age=2592000";
        }

        # Prevent clients from accessing hidden files (starting with a dot)
        # This is particularly important if you store .htpasswd files in the site hierarchy
        # Access to `/.well-known/` is allowed.
        # https://www.mnot.net/blog/2010/04/07/well-known
        # https://tools.ietf.org/html/rfc5785
        location ~* /\.(?!well-known\/) {
                deny all;
        }

        # Prevent clients from accessing to backup/config/source files
        location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
                deny all;
        }
}